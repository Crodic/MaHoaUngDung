/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package a51;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import javafx.stage.FileChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Crodic
 */
public class UIA51 extends javax.swing.JFrame {

    /**
     * Creates new form UIA51
     */
    public UIA51() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("A51 Steam Cipher");
        setLocation(new java.awt.Point(120, 100));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("Plain Text");

        jLabel2.setText("Cipher Text");

        jLabel3.setText("KEY");

        jButton1.setText("Encryption");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Descryption");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Save File");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Clear");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Open File");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel4.setText("Không có file nào được chọn");

        jLabel5.setText("OpenFile and Copy Here");

        jButton6.setText("P");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("C");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(111, 111, 111))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3))))
                    .addComponent(jLabel2))
                .addGap(48, 48, 48))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton5))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String plainText = jTextArea1.getText();
        String key = jTextField1.getText();
        String result = encryption(plainText, key);
        jTextArea2.setText(result);
        jTextArea3.setText(result);
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String cipherText = jTextArea2.getText();
        String key = jTextField1.getText();
        String result = decryption(cipherText, key);
        jTextArea1.setText(result);
        jTextArea3.setText(result);
        jTextArea2.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jTextArea1.setText("");
        jTextArea2.setText("");
        jTextArea3.setText("");
        jTextField1.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        readFile();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        saveFile();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String text = jTextArea3.getText();
        jTextArea1.setText(text);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String text = jTextArea3.getText();
        jTextArea2.setText(text);
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UIA51.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UIA51.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UIA51.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UIA51.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UIA51().setVisible(true);
            }
        });
    }
    //Đổi 1 chuỗi thành 1 dãy nhị phân 8 bit

    public static String changeToBit(String text, boolean isKey, boolean isEncrypt) {
        if (isEncrypt) {
            for (int i = 0; i < text.length(); i++) {
                char c = text.charAt(i);
                if (c > 127) {
                    JOptionPane.showMessageDialog(null, "Ký tự: - [" + c + "] - Không nằm trong bảng mã ASCII. Vui Lòng dùng những từ chứa trong bảng mã ASCII");
                    return "";
                }
            }
        }
        String newBit = "";
        for (char c : text.toCharArray()) {
            String binary = Integer.toBinaryString(c);
            while (binary.length() < 8) {
                binary = "0" + binary;
            }
            newBit += binary;
        }
        if (newBit.length() > 64 && isKey) {
            newBit = newBit.substring(0, 64);
        } else if (newBit.length() < 64 && isKey) {
            while (newBit.length() < 64) {
                newBit = "0" + newBit;
            }
        }
        return newBit;
    }

    //Đổi nhị phân thành 1 chuỗi
    public static String changeToText(String text) {
        StringBuilder newText = new StringBuilder();
        for (int i = 0; i < text.length(); i += 8) {
            String binaryByte = text.substring(i, i + 8);
            char c = (char) Integer.parseInt(binaryByte, 2);
            newText.append(c);
        }
        return newText.toString();
    }
    //Cắt chuỗi

    public static String sliceText(String text, int start, int end) {
        text = text.substring(start, end);
        return text;
    }
    //Chuyển chuỗi thành 1 Char Array Binary

    public static char[] textToArray(String text) {
        char[] charArray = text.toCharArray();
        char[] array = new char[charArray.length];
        for (int i = 0; i < charArray.length; i++) {
            array[i] = charArray[i];
        }
        return array;
    }
    //Dịch Phải

    public static char[] NextRight(char[] text, String state) {
        int XOR = 0;
        char[] newArray = new char[text.length];
        boolean isStart = true;
        if (state == "x") {
            XOR = text[13] ^ text[16] ^ text[17] ^ text[18];
        } else if (state == "y") {
            XOR = text[20] ^ text[21];
        } else if (state == "z") {
            XOR = text[7] ^ text[20] ^ text[21] ^ text[22];
        }
        for (int i = 0; i < text.length; i++) {
            if (i == 0 && isStart) {
                newArray[0] = Character.forDigit(XOR, 10);
                isStart = false;
                i--;
            } else if (i == text.length - 1) {
                continue;
            } else {
                newArray[i + 1] = text[i];
            }
        }
        return newArray;
    }
    //Lấy ra giá trị trong thanh ghi

    public static int index(char[] array) {
        int index = 0;
        if (array.length == 19) {
            index = Character.getNumericValue(array[8]); // Chuyển Char thành Int dùng Character.getNumericValue(char)
        } else if (array.length == 22) {
            index = Character.getNumericValue(array[10]);
        } else if (array.length == 23) {
            index = Character.getNumericValue(array[10]);
        }
        return index;
    }
    //Hàm Major

    public static int major(int x8, int y10, int z10) {
        int XOR = x8 ^ y10 ^ z10;
        return XOR;
    }
    //Hàm XOR chuỗi Encryption/Decryption với Key

    public static char[] XOR(char[] key, String plainText) {
        char[] result = new char[plainText.length()];
        char[] newPlainText = textToArray(plainText);
        for (int i = 0; i < newPlainText.length; i++) {
            int xor = key[i] ^ newPlainText[i];
            result[i] = Character.forDigit(xor, 10); //Chuyển int thành char hệ thập phân dùng Character.forDigit(int,10)
        }
        return result;
    }

    //Mã Hoá A51 => Nhận về 1 chuỗi đã được mã hoá
    public static String encryption(String plainText, String key) {
        String cipherText = "";
        plainText = changeToBit(plainText, false, true);
        key = changeToBit(key, true, true);
        char[] newKey = new char[plainText.length()];
        char[] cipherTextOnBinary = new char[plainText.length()];
        char[] registerX = textToArray(sliceText(key, 0, 19));
        char[] registerY = textToArray(sliceText(key, 19, 41));
        char[] registerZ = textToArray(sliceText(key, 41, 64));
        for (int i = 0; i < plainText.length(); i++) {
            registerX = NextRight(registerX, "x");
            registerY = NextRight(registerY, "y");
            registerZ = NextRight(registerZ, "z");
            int takeIndexX = index(registerX);
            int takeIndexY = index(registerY);
            int takeIndexZ = index(registerZ);
            int major = major(takeIndexX, takeIndexY, takeIndexZ);
            newKey[i] = Character.forDigit(major, 10);
        }
        cipherTextOnBinary = XOR(newKey, plainText);
        cipherText = String.valueOf(cipherTextOnBinary);
        cipherText = changeToText(cipherText);
        return cipherText;
    }
    //Giải mã A51 => Nhận về 1 chuỗi đã được giải mã

    public static String decryption(String cipherText, String key) {
        String plainText = "";
        cipherText = changeToBit(cipherText, false, false);
        key = changeToBit(key, true, true);
        char[] newKey = new char[cipherText.length()];
        char[] plainTextOnBinary = new char[cipherText.length()];
        char[] registerX = textToArray(sliceText(key, 0, 19));
        char[] registerY = textToArray(sliceText(key, 19, 41));
        char[] registerZ = textToArray(sliceText(key, 41, 64));
        for (int i = 0; i < cipherText.length(); i++) {
            registerX = NextRight(registerX, "x");
            registerY = NextRight(registerY, "y");
            registerZ = NextRight(registerZ, "z");
            int takeIndexX = index(registerX);
            int takeIndexY = index(registerY);
            int takeIndexZ = index(registerZ);
            int major = major(takeIndexX, takeIndexY, takeIndexZ);
            newKey[i] = Character.forDigit(major, 10);
        }
        plainTextOnBinary = XOR(newKey, cipherText);
        plainText = String.valueOf(plainTextOnBinary); // Chuyển 1 mảng ký tự thành 1 chuỗi dùng String.valueOf(char[])
        plainText = changeToText(plainText);
        return plainText;
    }

    public void readFile() {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            jLabel4.setText(selectedFile.getAbsolutePath());
            try {
                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(selectedFile));
                StringBuilder sb = new StringBuilder();
                int data;
                while ((data = bis.read()) != -1) {
                    sb.append((char) data);
                }
                bis.close();
                jTextArea3.setText(sb.toString());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    public void saveFile() {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String filePath = file.getAbsolutePath();
            try {
                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(new File(filePath)));
                String content = jTextArea3.getText();
                for (int i = 0; i < content.length(); i++) {
                    bos.write((int) content.charAt(i));
                }
                bos.close();
                JOptionPane.showMessageDialog(null, "Lưu Thành Công");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Lỗi: " + ex.getMessage());
            }
        }
    }

//    public void saveFile() {
//        JFileChooser fileChooser = new JFileChooser();
//        int result = fileChooser.showSaveDialog(null);
//        if (result == JFileChooser.APPROVE_OPTION) {
//            File file = fileChooser.getSelectedFile();
//            String filePath = file.getAbsolutePath();
//            try {
//                FileWriter fileWriter = new FileWriter(new File(filePath));
//                fileWriter.write(jTextArea3.getText());
//                fileWriter.close();
//                JOptionPane.showMessageDialog(null, "Lưu Thành Công");
//            } catch (IOException ex) {
//                JOptionPane.showMessageDialog(null, "Lỗi: " + ex.getMessage());
//            }
//        }
//    }
//    public void readFile() {
//        JFileChooser fileChooser = new JFileChooser();
//        int result = fileChooser.showOpenDialog(null);
//        if (result == JFileChooser.APPROVE_OPTION) {
//            File selectedFile = fileChooser.getSelectedFile();
//            jLabel4.setText(selectedFile.getAbsolutePath());
//            try {
//                BufferedReader br = new BufferedReader(new FileReader(selectedFile));
//                String line;
//                StringBuilder sb = new StringBuilder();
//                while ((line = br.readLine()) != null) {
//                    sb.append(line);
//                    sb.append("\n");
//                }
//                br.close();
//                jTextArea3.setText(sb.toString());
//            } catch (IOException ex) {
//                ex.printStackTrace();
//            }
//        }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
