/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package playfair;

/**
 *
 * @author Crodic
 */
public class playFairCipher extends javax.swing.JFrame {

    /**
     * Creates new form playFairCipher
     */
    public playFairCipher() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("PlainText");

        jLabel2.setText("CipherText");

        jScrollPane3.setViewportView(jTextPane1);

        jLabel3.setText("Key");

        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Decrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane4.setViewportView(jTextArea3);

        jLabel4.setText("After Key");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addComponent(jScrollPane4)
                            .addComponent(jLabel4))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(32, 32, 32)
                        .addComponent(jLabel4)
                        .addGap(5, 5, 5)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String key = jTextPane1.getText();
        String cipher = jTextArea2.getText();
        char[][] matrix = new char[5][5];
        createMaTrix(key, matrix);
        String showMatrix = changeTypeMatrix(key, matrix);
        jTextArea3.setText(showMatrix);
        String resual = removeNonLetterCharactersForPAndC(cipher);
        String[] pairs = padding(resual);
        String DecodeText="";
        for(String pair : pairs)
        {
            char c1 = pair.charAt(0);
            char c2 = pair.charAt(1);
            int col1=-1,row1 = -1,col2 = -1,row2=-1;
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 5; j++) {
                    if (matrix[i][j] == c1) {
                        row1=i;
                        col1=j;
                    }
                    if (matrix[i][j] == c2) {
                        row2=i;
                        col2=j;
                    }
                }
            }
            if (row1 == row2) {
                DecodeText += matrix[row1][(col1 - 1 + 5) % 5]; //trong trường hợp ra âm thì ta cộng thêm 5 để chắc kí tự nằm trong hàng
                DecodeText += matrix[row2][(col2 - 1 + 5) % 5];
            }
            else if (col1 == col2) {
                DecodeText += matrix[(row1 - 1 + 5) % 5][col1];
                DecodeText += matrix[(row2 - 1 + 5) % 5][col2];
            }
            else
            {
                DecodeText += matrix[row1][col2];
                DecodeText += matrix[row2][col1];
            }
        }
        jTextArea1.setText(DecodeText);
        jTextArea2.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String key = jTextPane1.getText();
        String plaintext = jTextArea1.getText();
        char[][] matrix = new char[5][5];
        createMaTrix(key, matrix);//tạo ma trận của key
        String showMatrix = changeTypeMatrix(key, matrix);
        jTextArea3.setText(showMatrix);
        String resual = removeNonLetterCharactersForPAndC(plaintext);//xóa không phải kí tự của plaintext
        String[] pairs = padding(resual);//tạo cặp vào gán vào mảng 1 chiều pairs
        String encodeText= "";//chuỗi rỗng
        for(String pair : pairs) //lấy cặp kí tự trong pairs
        {
            char c1 = pair.charAt(0);//lấy kí tư thứ 1 trong cặp đầu
            char c2 = pair.charAt(1);//lấy kí tự thứ 2 trong cặp đầu
            int col1=-1,row1 = -1,col2 = -1,row2=-1;//khởi tạo dòng một và cột 1 , dòng 2 và cột 2 gắn tất cả bằng -1 nếu không tìm thấy 
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 5; j++) {
                    if (matrix[i][j] == c1) { //tìm thấy kí tự thứ nhất trong ma trận thì gắn dòng cột ở vị trí trong mảng của kí tự thứ nhất
                        row1=i;
                        col1=j;
                    }
                    if (matrix[i][j] == c2) { // giống như kí tự thứ nhất
                        row2=i;
                        col2=j;
                    }
                }
            }
            if (row1 == row2) { //nếu cùng dòng thì dịch sang 1 ô bên phải 
                encodeText += matrix[row1][(col1 + 1) % 5]; //đảm bảo rằng chỉ số hàng dùng %5 gặp kí tự tìm thấy trong ma trận sau khi dịch chuyển vào chuỗi rộng đã tạo trước đó
                encodeText += matrix[row2][(col2 + 1) % 5]; //đảm bảo rằng chỉ số hàng dùng %5 gặp kí tự tìm thấy trong ma trận sau khi dịch chuyển vào chuỗi rộng đã tạo trước đó
            }
            else if (col1 == col2) { //dịch xuống dưới 1 ô theo cột
                encodeText += matrix[(row1+1) % 5][(col1)]; //theo cột thì t chuyển sang phần row trong ma trận 
                encodeText += matrix[(row2+1) % 5][(col2)]; //theo cột thì t chuyển sang phần row trong ma trận 
            }
            else // trường hợp nếu không cùng hàng thì lấy ví dòng và cột cuả kí tự  đổi cho nhau
            {
                encodeText += matrix[row1][col2];
                encodeText += matrix[row2][col1];
            }
        }
        jTextArea2.setText(encodeText);
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(playFairCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(playFairCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(playFairCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(playFairCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new playFairCipher().setVisible(true);
            }
        });
    }
    public static String removeNonLetterCharactersForPAndC(String input) // xóa không phải kí tự của plaintext và ciphertext
{
    String result = "";//tạo chuỗi rỗng
    for (int i = 0; i < input.length(); i++) { // dùng vòng lặp for để duyệt lấy kí tự
        char c = input.charAt(i); //dùng kiểu dữ liệu char để lấy một kí tự trong chuỗi string dùng charAt
        if (Character.isLetter(c)) { // kiểm tra có phải là kí tự không
            result += c; // nếu là kí tự thì thêm vào chuỗi
        }
    }
    return result;
}
    
  public static String[] padding(String input) { // ham tạo cặp
    input = removeNonLetterCharactersForPAndC(input); // dùng lại xóa những thứ không phải là ký tự
    input = input.toLowerCase();// chuyển các chữ về in thường hết
      if (input.length()% 2 != 0) { // nếu độ dài chữ là lẻ thì thêm ký tự "z"
          input +="z";
      }
      int dem=0; // khởi tạo biến đếm
      for (int i = 1 ; i < input.length(); i+=2) {
          if (input.charAt(i) == input.charAt(i-1)) { //nếu kí tự sao giống kí tự trước thì tăng biến đếm
              dem++;
          }
      }
      String [] pairs = new String [(input.length()/2)+dem]; //dùng để tạo các cặp nếu trong đó có cặp kí tự trùng nhau thì dùng biến đếm để tăng mảng lên
      int arr=0;// khởi tạo mảng
      for (int i = 0; i < input.length(); i+=2) {
          String current=input.charAt(i)+""+input.charAt(i+1);//lấy kí tự từ biến input gán vào biến current dùng "" để chuyển char sang string
          if (current.charAt(0) == current.charAt(1)) { // kiểm tra kí tự cặp có trùng nhau 
             
              String b=current.charAt(0)+"z";// dùng biến b để gán kí tự đầu trong cặp cộng thêm "z"
              pairs[arr++]= b;//thêm cặp kí tự từ b vào mảng 0 và tăng mảng lên 1
              String a ="z"+ current.charAt(1);// giống như b
              pairs[arr++]=a;
          }
          else{
              pairs[arr++]=current; // nêú không trùng thì lấy biến current gán thẳng vào mảng
          }
      }
      return pairs;
}

    public static void createMaTrix(String key, char [][] matrix) // hàm tạo ma trận key
    {
        String a ="abcdefghiklmnopqrstuvwxyz"; // khởi tạo từ chuỗi kí tự từ a-z
        //key=key.toLowerCase()+a;
        key=key.toLowerCase(); // chuyển sang in thường
        key=removeNonLetterCharactersForKey(key);//Xóa các từ trùng nhau của key và những thứ không phải kí tự
        a+=key;//cộng thêm chuỗi key vào a
        
        for(int i=0;i<a.length();i++){
            if (a.charAt(i) !='j' && key.indexOf(a.charAt(i)) == -1) // tại i với j cùng nên ô nên t chỉ cần chọn i , loại j và nếu kí tự đó chưa có trong key thì thêm vào key
            {
                key+=a.charAt(i);
            }
        }
        int k=0;
        for (int i = 0; i < 5; i++) {     // tạo ma trận 2 chiều của key 
            for (int j = 0; j < 5; j++) {
                matrix[i][j]=key.charAt(k);
                k++;
            }
        }
    }
    public static String removeNonLetterCharactersForKey(String key) // hàm xóa mọi thứ không phải là kí tự của key
    {
        String result = "";
        for (int i = 0; i < key.length(); i++) {
            char c = key.charAt(i);
            if (result.indexOf(c)== -1 && Character.isLetter(c)){ //nêú chưa có kí tự thì thêm vào chuỗi rỗng đã khởi tạo trước đó và kiểm tra nó có phải kí tự
                result+=(c);
            }
        }
        return result;
    }
    public static String changeTypeMatrix(String key, char[][] matrix)
    {
        createMaTrix(key, matrix);
        String resual="";
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                resual += matrix[i][j];
            }
        }
       return resual;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
