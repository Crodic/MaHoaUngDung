/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ceasar;

import javax.swing.JOptionPane;

/**
 *
 * @author Crodic
 */
public class UICeasar extends javax.swing.JFrame {

    /**
     * Creates new form UICeasar
     */
    public UICeasar() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("PlainText");

        jLabel2.setText("CipherText");

        jTextField3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton1.setBackground(new java.awt.Color(237, 55, 55));
        jButton1.setText("Encrypt");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(7, 55, 245));
        jButton2.setText("Decrypt");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Key");

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane1.setViewportView(jTextArea2);

        jButton3.setText("Clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                        .addComponent(jButton2))
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField3))
                                .addGap(90, 90, 90))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(159, 159, 159)
                                .addComponent(jLabel3)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String ASCII = "abcdefghijklmnopqrstuvwxyz";
        String plainText = jTextArea2.getText(); //Lấy value của plainText
        String key = jTextField3.getText(); //Lấy value của key
        plainText = plainText.toLowerCase(); //Chuyển plainText thành chữ thường
        String encryption = ""; //Biến lưu kết quả
        int keyValue = 0; //Biến lưu giá trị của key dạng int
        
        //Vì phương thức này nếu plainText rỗng sẽ không thể thực hiện được nên sẽ bắt lỗi và dừng chương trình
        if(plainText.isEmpty()){
            return;
        }
        //Nếu Key rỗng sẽ in ra 26 kết quả tương ứng với 26 key
        if(key.isEmpty()){
            JOptionPane.showMessageDialog(null, "Key đang để trống. Kết quả sẽ in ra toàn bộ key từ 0 đến 25 !");
            //Duyệt qua từng key
            for(int searchKey = 0; searchKey < 26; searchKey++){
                String temp = ""; //Kết quả của từng key sẽ được lưu vào biến temp
                //Duyệt qua vòng lặp để thực hiện mã hoá
                for(int i = 0; i< plainText.length();i++){
                    int positionText = ASCII.indexOf(plainText.charAt(i)); //Tìm vị trí của từng từ trong plainText
                    //Nếu từ đó không tồn tại trong mảng thì sẽ in lại giá trị của nó
                    if(positionText == -1){
                        temp += plainText.charAt(i);
                        continue;
                    }
                    int realKey = (positionText + searchKey) % 26; //thực hiện mã hoá theo từng key của vòng lặp
                    char afterEncrypt = ASCII.charAt(realKey); //Tìm ra từ của vị trí realKey
                    temp += afterEncrypt; //Lưu nó vào biến temp
                }
                //In ra UI cho người dùng
                jTextArea1.append("With key = " + searchKey + " => " + temp + "\n");
                jTextArea2.setText("");
            }
            return;
        }
        //Nếu key không rỗng thì duyệt qua vòng lặp
        keyValue = Integer.parseInt(key); //Chuyển kiểu dữ liệu String thành int
        for(int i = 0; i< plainText.length();i++){ 
            int positionText = ASCII.indexOf(plainText.charAt(i)); //Tìm ra vị trí của PlainText
            //Nếu từ đó không tồn tại trong mảng thì sẽ in lại giá trị của nó
            if(positionText == -1){ 
                encryption += plainText.charAt(i);
                continue;
            }
            int realKey = (positionText + keyValue) % 26; //thực hiện mã hoá theo key mà người dùng nhập vào
            char afterEncrypt = ASCII.charAt(realKey); //Tìm ra từ của vị trí realKey
            encryption += afterEncrypt; //Lưu nó vào biến temp
        }
        
        jTextArea1.setText(encryption);
        jTextArea2.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Tương tự như trên
        String ASCII = "abcdefghijklmnopqrstuvwxyz";
        String cipherText = jTextArea1.getText();
        String key = jTextField3.getText();
        if(cipherText.isEmpty()){
            return;
        }
        if(key.isEmpty()){
            JOptionPane.showMessageDialog(null, "Key đang để trống. Kết quả sẽ in ra toàn bộ kết quả có key từ 0 đến 25 !");
            for(int searchKey = 0; searchKey < 26; searchKey++){
                String temp = "";
                for(int i = 0; i< cipherText.length();i++){
                    int positionText = ASCII.indexOf(cipherText.charAt(i));
                    if(positionText == -1){
                        temp += cipherText.charAt(i);
                        continue;
                    }
                    int realKey = (positionText - searchKey) % 26; //Thực hiện trừ thay vì cộng
                    //Kiểm Lỗi
                    if(realKey < 0){
                        realKey = realKey + 26;
                    }
                    char afterDecrypt = ASCII.charAt(realKey);
                    temp += afterDecrypt;
                }
                jTextArea2.append("With key = " + searchKey + " => " + temp + "\n");
                jTextArea1.setText("");
            }
            return;
        }
        int keyValue = Integer.parseInt(key);
        
        cipherText = cipherText.toLowerCase();
        String encryption = "";
        for(int i = 0; i< cipherText.length();i++){
            int positionText = ASCII.indexOf(cipherText.charAt(i));
            if(positionText == -1){
                encryption += cipherText.charAt(i);
                continue;
            }
            int realKey = (positionText - keyValue) % 26;
            if(realKey < 0){
                realKey = realKey + 26;
            }
            char afterEncrypt = ASCII.charAt(realKey);
            encryption += afterEncrypt;
        }
        jTextArea2.setText(encryption);
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextArea1.setText("");
        jTextArea2.setText("");
        jTextField3.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UICeasar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UICeasar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UICeasar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UICeasar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UICeasar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

